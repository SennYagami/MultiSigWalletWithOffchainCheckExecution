/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace CheckExecutor {
  export type CheckInfoStruct = {
    checkOwner: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
    operation: PromiseOrValue<BigNumberish>;
    safeTxGas: PromiseOrValue<BigNumberish>;
    baseGas: PromiseOrValue<BigNumberish>;
    gasPrice: PromiseOrValue<BigNumberish>;
    gasToken: PromiseOrValue<string>;
    refundReceiver: PromiseOrValue<string>;
    checkNonce: PromiseOrValue<BigNumberish>;
    signatures: PromiseOrValue<BytesLike>;
  };

  export type CheckInfoStructOutput = [
    string,
    string,
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    string
  ] & {
    checkOwner: string;
    to: string;
    value: BigNumber;
    data: string;
    operation: number;
    safeTxGas: BigNumber;
    baseGas: BigNumber;
    gasPrice: BigNumber;
    gasToken: string;
    refundReceiver: string;
    checkNonce: BigNumber;
    signatures: string;
  };
}

export interface CheckExecutorInterface extends utils.Interface {
  functions: {
    "checkValidity(bytes)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "encodeCheckExecutionData((address,address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256,bytes))": FunctionFragment;
    "encodeCheckExecutionData_1((address,address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256,bytes))": FunctionFragment;
    "encodeCheckExecutionData_2((address,address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256,bytes))": FunctionFragment;
    "executeCheck(bytes)": FunctionFragment;
    "getChainId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkValidity"
      | "domainSeparator"
      | "encodeCheckExecutionData"
      | "encodeCheckExecutionData_1"
      | "encodeCheckExecutionData_2"
      | "executeCheck"
      | "getChainId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkValidity",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeCheckExecutionData",
    values: [CheckExecutor.CheckInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeCheckExecutionData_1",
    values: [CheckExecutor.CheckInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeCheckExecutionData_2",
    values: [CheckExecutor.CheckInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCheck",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeCheckExecutionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeCheckExecutionData_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeCheckExecutionData_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;

  events: {
    "ExecuteCheckFailure(address,address,uint256,bytes,uint8)": EventFragment;
    "ExecuteCheckSuccess(address,address,uint256,bytes,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteCheckFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteCheckSuccess"): EventFragment;
}

export interface ExecuteCheckFailureEventObject {
  checkOwner: string;
  to: string;
  value: BigNumber;
  data: string;
  operation: number;
}
export type ExecuteCheckFailureEvent = TypedEvent<
  [string, string, BigNumber, string, number],
  ExecuteCheckFailureEventObject
>;

export type ExecuteCheckFailureEventFilter =
  TypedEventFilter<ExecuteCheckFailureEvent>;

export interface ExecuteCheckSuccessEventObject {
  checkOwner: string;
  to: string;
  value: BigNumber;
  data: string;
  operation: number;
}
export type ExecuteCheckSuccessEvent = TypedEvent<
  [string, string, BigNumber, string, number],
  ExecuteCheckSuccessEventObject
>;

export type ExecuteCheckSuccessEventFilter =
  TypedEventFilter<ExecuteCheckSuccessEvent>;

export interface CheckExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CheckExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkValidity(
      checkMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    encodeCheckExecutionData(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeCheckExecutionData_1(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { e1: string }>;

    encodeCheckExecutionData_2(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { e2: string }>;

    executeCheck(
      checkMsg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  checkValidity(
    checkMsg: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  encodeCheckExecutionData(
    checkInfo: CheckExecutor.CheckInfoStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeCheckExecutionData_1(
    checkInfo: CheckExecutor.CheckInfoStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeCheckExecutionData_2(
    checkInfo: CheckExecutor.CheckInfoStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  executeCheck(
    checkMsg: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    checkValidity(
      checkMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    encodeCheckExecutionData(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeCheckExecutionData_1(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeCheckExecutionData_2(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    executeCheck(
      checkMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ExecuteCheckFailure(address,address,uint256,bytes,uint8)"(
      checkOwner?: null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operation?: null
    ): ExecuteCheckFailureEventFilter;
    ExecuteCheckFailure(
      checkOwner?: null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operation?: null
    ): ExecuteCheckFailureEventFilter;

    "ExecuteCheckSuccess(address,address,uint256,bytes,uint8)"(
      checkOwner?: null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operation?: null
    ): ExecuteCheckSuccessEventFilter;
    ExecuteCheckSuccess(
      checkOwner?: null,
      to?: PromiseOrValue<string> | null,
      value?: null,
      data?: null,
      operation?: null
    ): ExecuteCheckSuccessEventFilter;
  };

  estimateGas: {
    checkValidity(
      checkMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    encodeCheckExecutionData(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeCheckExecutionData_1(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeCheckExecutionData_2(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeCheck(
      checkMsg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkValidity(
      checkMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeCheckExecutionData(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeCheckExecutionData_1(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeCheckExecutionData_2(
      checkInfo: CheckExecutor.CheckInfoStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeCheck(
      checkMsg: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
